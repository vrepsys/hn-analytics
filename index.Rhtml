<!--begin.rcode exclude-default-headers, echo=FALSE
  knit_patterns$set(header.begin = NULL)
  Sys.setenv(TZ="America/New_York")
end.rcode-->
<!DOCTYPE HTML>
<html>
<head>
  <title>Analysing Hacker News Metadata with R</title>
  <meta charset='utf-8'> 
  <link rel="stylesheet" type="text/css" href="css/style.css">
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
    ga('create', 'UA-3527401-5', 'vrepsys.github.io');
    ga('send', 'pageview');
  
  </script>
</head>

<body>

  <div class="container">
    <h1 style="margin-bottom: 5px;"> Analysing Hacker News Metadata with R </h1>
    <div class="name">by <a href="http://valdemaras.repsys.me">Val Rep≈°ys</a> &nbsp; &nbsp; 2012-09-03 </div>
    <p class="summary">
      This page provides a set of examples showing how you can extract various statistics from <a href='http://news.ycombinator.com'>Hacker News</a> metadata using <a href="http://www.r-project.org/">R</a>: simple statistics such as <a href="#simple-stats">top domains and top commenters</a> as well as more complex things like <a href="#charts">charting activity patterns of specific users</a> and <a href="#outliers">activity outlier detection</a>. You can use the thumbnainls to scroll down and just take a quick look at the charts or you can go through the whole document and even run the code on your machine for the full experience.
    </p>
    
    <div class="clearfix">
      <a href="#activity-tptacek" class="thumbnail"><img src="figure/tptacek.png" title="Daily activity chart: tptacek" /></a>
      <a href="#activity-pg" class="thumbnail"><img src="figure/pg.png" title="Daily activity chart: pg" /></a>
      <a href="#activity-patio11" class="thumbnail"><img src="figure/patio11.png" title="Daily activity chart: patio11" /></a>
      <a href="#activity-jacquesm" class="thumbnail"><img src="figure/jacquesm.png" title="Daily activity chart: jacquesm" /></a>
      <a href="#activity-jrockway" class="thumbnail"><img src="figure/jrockway.png" title="Daily activity chart: jrockway" /></a>
      <a href="#monthly-posts" class="thumbnail"><img src="figure/monthly posts.png" title="Monthly numbers of posts" /></a>
      <a href="#daily-posts" class="thumbnail"><img src="figure/daily posts.png" title="Daily numbers of posts" /></a>
      <a href="#daily-posts-circles" class="thumbnail"><img src="figure/dayly posts (points).png" title="Daily numbers of posts (circles)" /></a>
      <a href="#daily-posts-coloured-circles" class="thumbnail"><img src="figure/daily posts (coloured points).png" title="Daily numbers of posts (coloured circles)" /></a>
      <a href="#outliers" class="thumbnail"><img src="figure/daily outliers.png" title="Daily numbers of posts from 2011-01-01 to 2013-07-22" /></a>
      <a href="#outliers-smoothed" class="thumbnail"><img src="figure/daily outliers smoothed.png" title="Daily numbers of posts from 2011-01-01 to 2013-07-22 + smoothed curve" /></a>
      <a href="#outliers-detrended" class="thumbnail"><img src="figure/daily outliers detrended.png" title="Daily numbers of posts from 2011-01-01 to 2013-07-22 detrended" /></a>
      <a href="#outliers-marked" class="thumbnail"><img src="figure/daily outliers marked.png" title="Daily numbers of posts from 2011-01-01 to 2013-07-22, outliers marked" /></a>
    </div>    
    
    
    <p> <span style="font-weight: bold">About me and disclaimer</span> You can find more about me on my <a href="http://valdemaras.repsys.me">homepage</a>. I'm interested in data and visualisation. I learned R while creating the examples below so don't take them for granted. If you notice any errors/mistakes or you know how to do the same things better please let me know! Let me know as well if you found this page useful or interesting! <br/> <br/>
    <a href="#" class='hn-link'>Discuss on Hacker News</a>
  
  
    </p>
    
    <h2> Loading the datasets </h2>
    <p>
      If you want to run the the code snippets on this page yourself and perhaps do some experiments of your own you're going to need to clone and extract the <a href='https://github.com/vrepsys/hn-analytics'>datasets from Github</a>. 
      You'll also have to download and install <a href="http://www.r-project.org/">R</a> or <a href="http://www.rstudio.com/">R Studio</a> (a lightweight IDE for R).
    </p>
    <p> Once you've got hn_posts.csv and hn_comments.csv on your machine, the first thing you want to do is run the code below to load both datasets into R data frames and parse timestamp strings into POSIXct date-time objects. We also set the global time zone and change it for each timestamp as well. I've chosen EST time zone because presumably the majority of HN users are based in the US and also because EST time is closer to Europen time zones than PST. 
    </p>
    <p> Before you run the code below remember to change the paths of the data files to where you have extracted them. </p>
    <p> This code block is pretty slow and might take around 5 minutes depending on your machine (there are ways to optimize this. I have not done that, however, in order to keep things simple). </p>
      <!--begin.rcode, tidy=FALSE, cache=TRUE
      Sys.setenv(TZ="America/New_York")
      all_posts = read.csv('csv/hn_posts.csv')
      all_posts$created_at = as.POSIXct(strptime(all_posts$created_at, "%Y-%m-%dT%H:%M:%SZ"), "UTC")
      attr(all_posts$created_at, 'tzone') = 'America/New_York'
      
      all_comments = read.csv('csv/hn_comments.csv')
      all_comments$created_at = as.POSIXct(strptime(all_comments$created_at, "%Y-%m-%dT%H:%M:%SZ"), "UTC")
      attr(all_comments$created_at, 'tzone') = 'America/New_York'
      end.rcode-->
      
   <p> If you are new to R it might be useful to know that you can type in ?command into console in order to find out what the command does. For example: </p>
      <!--begin.rcode, tidy=FALSE, cache=TRUE
      ?read.csv
      end.rcode-->
   <p> Code below outputs top rows of all_comments and all_posts data frames. Note that rows are sorted by date, that's because they were already sorted in the csv files.</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      head(all_posts)
      head(all_comments)
      end.rcode-->
  
  <h2 id="simple-stats"> Simple statistics </h2>
  <p>How many posts and comments are there in the datasets in total?</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      nrow(all_posts)
      nrow(all_comments)
      end.rcode-->
      
  <p>Top 10 users by number of comments</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      all_comments$count = 1
      users = aggregate(count ~ username, all_comments, sum)
      users = users[with(users, order(-count)), ]
      head(users, n=10)
      end.rcode-->
      
  <p>Top 10 users by total number of points on their comments</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      users = aggregate(points ~ username, all_comments, sum)
      users = users[with(users, order(-points)), ]
      head(users, n=10)
      end.rcode-->
      
  <p>Top 10 users by number of posts</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      all_posts$count = 1
      users = aggregate(count ~ username, all_posts, sum)
      users = users[with(users, order(-count)), ]
      head(users, n=10)
      end.rcode-->
      
  <p>Top 10 users by number of points for posts</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      users = aggregate(points ~ username, all_posts, sum)
      users = users[with(users, order(-points)), ]
      head(users, n=10)
      end.rcode-->
    
  <p>Top 10 domains. Note that #1 represents posts with no domain: 'Show HN', 'Ask HN' and the like.   </p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      all_posts$count = 1
      domains = aggregate(count ~ domain, all_posts, sum)
      domains = domains[with(domains, order(-count)), ]
      head(domains, n=10)
      end.rcode-->
  <p>Top 10 by who have posted most of the .co.uk links</p>
      <!--begin.rcode tidy=FALSE, cache=TRUE
      couk_posts = all_posts[grep('co.uk', all_posts$domain), ]
      users = aggregate(count ~ username, couk_posts, sum)
      users = users[with(users, order(-count)), ]
      head(users, n=10)
      end.rcode--> 
      
  <h2 id="charts"> Plotting user activity patterns</a></h2>
  
  <p> Let's look into how to visualise user activity. For that we have to select specific user's posts and comments into separate data frames. 
  I'll use the top user by number of points in the code and then also plot the rest of the top 5 users.   </p>
  <!--begin.rcode tidy=FALSE, cache=TRUE
  username = 'tptacek'
  users_comments = all_comments[all_comments$username == username, ]
  users_posts = all_posts[all_posts$username == username, ]
  end.rcode--> 
  
  <p> Next we're going to split the timestamps of both datasets into minutes (y axis) and dates (x axis). Running the code below creates 4 arrays: dates arrays contain post/comment dates and minute arrays contain minutes past the date the post/comment was made.</p>
  <!--begin.rcode tidy=FALSE, cache=TRUE
  comment_dates = trunc(users_comments$created_at, 'days')
  comment_minutes = difftime(users_comments$created_at, comment_dates, units='mins')
  post_dates = trunc(users_posts$created_at, 'days')
  post_minutes = difftime(users_posts$created_at, post_dates, units='mins')
  end.rcode-->
  <p> We're going to plot comments first (black squares), then posts (red squares), and then draw ticks and labels on the y axis.</p>
  <!--begin.rcode tptacek, tidy=FALSE, fig.width=9, fig.height=5, dpi=100, cache=TRUE
  # set parameters for the next thing to be drawn
  par(mar=c(3, 3, 2, 0), mgp=c(1.5,0.2,0), las=1, cex.axis=0.7, pch=22)
  # plot comments
  plot(comment_dates, comment_minutes, ylim=c(0,1439), xlab='date', ylab='time', main=username, yaxt='n')
  # plot posts in red
  points(post_dates, post_minutes, col='red', pch=22)
  # set parameters for the next thing to be drawn (axis)
  par(mgp=c(1,0.6,0), las=1)
  # draw y axis
  axis(2, at=0:23*60, cex.axis=0.7, labels=0:23)
  end.rcode-->
  
  <p> Notice the gap somewhere between 2:00 and 10:00. Presumably this is night time in this particular user's timezone. 
  Likely this user is located in the PST timezone, which is 3 or 4 hours behind EST depending on daylight saving periods.</p>
  
  <p> Below find other top 5 users' charts. One thing that struck me about those charts is the lack of apparent sleep patterns in some of them. Other than that I will leave the reader to make their own conclusions. </p>
  
  <!--begin.rcode user_time_chart, echo=FALSE, eval=FALSE
  users_comments = all_comments[all_comments$username == username, ]
  users_posts = all_posts[all_posts$username == username, ]
  comment_dates = trunc(users_comments$created_at, 'days')
  comment_minutes = difftime(users_comments$created_at, comment_dates, units='mins')
  post_dates = trunc(users_posts$created_at, 'days')
  post_minutes = difftime(users_posts$created_at, post_dates, units='mins')
  par(mar=c(3, 3, 2, 0), mgp=c(1.5,0.2,0), las=1, cex.axis=0.7, pch=22)
  plot(comment_dates, comment_minutes, ylim=c(0,1439), xlab='date', ylab='time', main=username, yaxt='n')
  points(post_dates, post_minutes, col='red', pch=22)
  par(mgp=c(1,0.6,0), las=1)
  axis(2, at=0:23*60, cex.axis=0.7, labels=0:23)
  end.rcode--> 
  
  <!--begin.rcode pg, echo=FALSE, cache=TRUE
  username = 'pg' 
  end.rcode--> 
  <!--begin.rcode pg, ref.label='user_time_chart', fig.width=9, fig.height=5, dpi=100, echo=FALSE, cache=TRUE
  end.rcode-->
  
  <!--begin.rcode patio11, echo=FALSE, cache=TRUE
  username = 'patio11' 
  end.rcode--> 
  <!--begin.rcode patio11, ref.label='user_time_chart', fig.width=9, fig.height=5, dpi=100, echo=FALSE, cache=TRUE
  end.rcode-->
  
  
  <!--begin.rcode jacquesm, echo=FALSE, cache=TRUE
  username = 'jacquesm' 
  end.rcode--> 
  <!--begin.rcode jacquesm, ref.label='user_time_chart', fig.width=9, fig.height=5, dpi=100, echo=FALSE, cache=TRUE
  end.rcode-->
  
  <!--begin.rcode jrockway, echo=FALSE, cache=TRUE
  username = 'jrockway' 
  end.rcode--> 
  <!--begin.rcode jrockway, ref.label='user_time_chart', fig.width=9, fig.height=5, dpi=100, echo=FALSE, cache=TRUE
  end.rcode-->
  
  <h2> Using xts to aggregate and filter time series </h2>
  <p> <a href="http://cran.r-project.org/package=xts">xts</a> is a handy library for working with time series data in R. Before you start using it, however, you have to install it using the commands below: </p>
  <!--begin.rcode, eval=FALSE
  install.packages('xts')
  require(xts)
  end.rcode-->
  <!--begin.rcode, include=FALSE
  require(xts)
  end.rcode-->
  <p> In order to harness xts functionality we need to create an xts object. The first thing we do below is create an xts object with only a date index and then add a column called count which is equal to 1 for all dates (this will help us with aggregation).  </p> <p> Note that the rest of this text only deals with HN posts. The same commands should work for comments as well though. </p>
  <!--begin.rcode
  all_posts_xts = xts(order.by=all_posts$created_at)
  all_posts_xts = merge(all_posts_xts, count=1)
  head(all_posts_xts)
  end.rcode-->
  <p> Once we have an xts object we can use various aggregation and filtering functions. For example, let's aggregate the dates by month and plot the resulting object.<p>
  <!--begin.rcode monthly posts, fig.width=9, fig.height=5, dpi=100
  monthly_xts = apply.monthly(all_posts_xts, sum)
  # Remove the last month since it does not contain full data
  monthly_xts = monthly_xts[!time(monthly_xts) %in% time(last(monthly_xts))]
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  plot(monthly_xts, ylim=c(0,25000), xlab='month', ylab='number of posts', main='Monthly numbers of posts', 
       mgp=c(2.2,1,0), yaxt='n', major.ticks='years')
  par(mgp=c(3,0.6,0))
  axis(2, at=0:5*5000, cex.axis=0.7, labels=0:5*5000)
  end.rcode-->
  <p> Let's aggregate post counts by day now </p>
  <!--begin.rcode daily posts, fig.width=9, fig.height=5, dpi=100
  daily_xts = apply.daily(all_posts_xts, sum)
  # Remove the last day
  daily_xts = daily_xts[!time(daily_xts) %in% time(last(daily_xts))]
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  plot(daily_xts, ylim=c(0,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts', 
       mgp=c(2.2,1,0), yaxt='n', major.ticks='years')
  par(mgp=c(1,0.8,0))
  axis(2, at=0:11*100, cex.axis=0.7, labels=0:11*100)
  end.rcode-->
  <p> In the chart above it seems as though the number of posts varies a lot day to day. It's hard to see what's really happening here because a lot of the data points might be covered by lines connecting them. Let's try and draw the same plot, except for each data point we draw a little circle and no lines to connect them. </p>
  <!--begin.rcode dayly posts (points), fig.width=9, fig.height=5, dpi=100
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  plot(daily_xts, ylim=c(0,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts', 
       mgp=c(2.2,1,0), yaxt='n', major.ticks='years', type='p')
  par(mgp=c(1,0.8,0))
  axis(2, at=0:11*100, cex.axis=0.7, labels=0:11*100)
  end.rcode-->
  
  <p> There are two lines or two clusters of data points. Presumably the upper one contains weekday data points and the one below contains weekends. To make sure it's true we will
  color weekends in red. </p>
  <!--begin.rcode daily posts (coloured points), fig.width=9, fig.height=5, dpi=100
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  plot(daily_xts[.indexwday(daily_xts) %in% 1:5], ylim=c(0,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts (weekends in red)', mgp=c(2.2,1,0), yaxt='n', major.ticks='years', type='p') 
  points(daily_xts[.indexwday(daily_xts) %in% c(0,6)], type='p', col='red') 
  par(mgp=c(1,0.8,0))
  axis(2, at=0:11*100, cex.axis=0.7, labels=0:11*100)
  end.rcode-->
  
  
  <h2 id="outliers"> Outlier detection </h2>
  <p> In the previous chart we can observe that weekdays have quite some outliers. Weekends seem to have only a few outliers on the days that fall just before the new year. The weekday outliers are presumably holidays. Assuming that the majority of HN readers are from the US those should be US holidays.</p>
  <p> For the sake of simplicity let's only look at the dates starting from the 1st of January 2012 and ending on the 22nd July 2013 (the last full day on the dataset). </p>
  <!--begin.rcode daily outliers, fig.width=9, fig.height=5, dpi=100
  weekdays_xts = daily_xts[.indexwday(daily_xts) %in% 1:5]
  weekdays_xts = weekdays_xts['2012-01-01::2013-07-22']
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  head(weekdays_xts)
  plot(weekdays_xts, ylim=c(200,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts on weekdays', mgp=c(2.2,1,0), yaxt='n', major.ticks='months') 
  par(mgp=c(1,0.8,0))
  axis(2, at=2:11*100, cex.axis=0.7, labels=2:11*100)
  end.rcode-->
  <p> To avoid/minimize the effects of trend and seasonality we're going to smooth the curve using lowess smoother and then find outliers on the residuals we'll get after subtracting every datapoint from its smoothed value.</p>
  <!--begin.rcode daily outliers smoothed, fig.width=9, fig.height=5, dpi=100
  datapoints = coredata(weekdays_xts)[,1]
  smoothed_datapoints = lowess(datapoints, f=1/10)
  index = index(weekdays_xts)
  par(mar=c(3.5, 4, 2, 0), las=1, cex.axis=0.7)
  plot(weekdays_xts, ylim=c(200,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts on weekdays', mgp=c(2.2,1,0), yaxt='n', major.ticks='months') 
  lines(index, smoothed_datapoints$y, col='red')
  axis(2, at=2:11*100, cex.axis=0.7, labels=2:11*100)
  end.rcode-->
  
  <p> Let's see how the detrended graph looks like and mark the outliers with red circles. </p>
  <!--begin.rcode daily outliers detrended, fig.width=9, fig.height=5, dpi=100
  weekdays_residuals = datapoints - smoothed_datapoints$y
  weekdays_residuals_xts = xts(weekdays_residuals, order.by=index(weekdays_xts))
  par(mar=c(3.5, 3, 2, 0), las=1, cex.axis=0.7)
  plot(weekdays_residuals_xts, ylim=c(-500,300), xlab='day', ylab='residual', main='Residuals + outliers marked', mgp=c(2.2,1,0), yaxt='n', major.ticks='months') 
  outliers = boxplot.stats(weekdays_residuals)$out
  points(index[which(weekdays_residuals %in% outliers)], weekdays_residuals[which(weekdays_residuals %in% outliers)], col='red')
  axis(2, at=-5:3*100, cex.axis=0.7, labels=-5:3*100)
  end.rcode-->
  
  <p> Next we output the outlier dates and draw the original weekday chart with outliers marked </p>
  <!--begin.rcode daily outliers marked, fig.width=9, fig.height=5, dpi=100
  # outliers that have unusually high daily number of posts
  outliers_high = outliers[outliers > 0]
  # outliers that have unusually low daily number of posts
  outliers_low = outliers[outliers < 0]
  index[which(weekdays_residuals %in% outliers_high)]
  index[which(weekdays_residuals %in% outliers_low)]
  par(mar=c(3.5, 3, 2, 0), las=1, cex.axis=0.7)
  plot(weekdays_xts, ylim=c(200,1100), xlab='day', ylab='number of posts', main='Daily numbers of posts on weekdays', mgp=c(2.2,1,0), yaxt='n', major.ticks='months') 
  points(index[which(weekdays_residuals %in% outliers)], datapoints[which(weekdays_residuals %in% outliers)], col='red') 
  axis(2, at=2:11*100, cex.axis=0.7, labels=2:11*100)
  end.rcode-->
  
  <h2> Attempting to explain the outliers </h2>
  <div class="clearfix">
    <div style="float: left; width: 350px; margin-right: 30px;">
      <p>
        Most outliers are related to low numbers of posts due to holidays some of which are common to both US and Europe (e.g. Christmas), 
        others only present only in the US (e.g. Thanksgiving).
      <p>
      <p> Christmas period is the largest outlier, this is probably because it's a holiday that's common across so many different countries. However, Thanksgiving is quite a large outlier too, that is probably because the majority of HN users are based in the US.</p>
      <p> It's interesting that the 3 high outliers are not holidays but are very close to holidays. The 18th and the 17th of Jan 2012 are high outliers that come after the 16th of Jan which is Birthday of Martin Luther King, Jr. and the 2nd of July is very close to the 4th of July (Independence Day). Either there were more interesting news items during those days or people were reading and posting more stories for some other reason.</p>
    </div>
    <table style="float: left;width: 260px;">
      <tr><td colspan="2" style="font-weight: bold;">Unusually low values</td></tr>
      <tr><td style="width: 80px">2012-01-02</td><td>New Year's Day</td></tr>
      <tr><td>2012-04-06</td><td>Good Friday</td></tr>
      <tr><td>2012-05-28</td><td>Memorial Day</td></tr>
      <tr><td>2012-09-03</td><td>Labor Day</td></tr>
      <tr><td>2012-11-22</td><td>Thanksgiving Day</td></tr>
      <tr><td>2012-11-23</td><td>Day after Thanksgiving</td></tr>
      <tr><td>2012-12-24</td><td>Christmas Season </td></tr>
      <tr><td>2012-12-25</td><td>Christmas Day</td></tr>
      <tr><td>2012-12-26</td><td>Christmas Season</td></tr>
      <tr><td>2012-12-27</td><td>Christmas Season</td></tr>
      <tr><td>2012-12-28</td><td>Christmas Season</td></tr>
      <tr><td>2012-12-31</td><td>Christmas Season</td></tr>
      <tr><td>2013-01-01</td><td>New Year's Day</td></tr>
      <tr><td>2013-03-29</td><td>Good Friday</td></tr>
      <tr><td>2013-05-27</td><td>Memorial Day</td></tr>
      <tr><td>2013-07-04</td><td>Independence Day</td></tr>
      <tr><td>2013-07-05</td><td>Day after Independence Day</td></tr>
    </table>
    
    <table style="float: left; width: 260px;">
      <tr><td colspan="2" style="font-weight: bold;">Unusually high values</td></tr>
      <tr><td style="width: 80px;">2012-01-18</td><td>Soon after Birthday of Martin Luther King, Jr.</td></tr>
      <tr><td>2012-01-19</td><td>Soon after Birthday of Martin Luther King, Jr.</td></tr>
      <tr><td>2013-07-02</td><td>July 4th approaching</td></tr>
    </table>
  </div>
  
  <h2>Final word</h2>
  <p>I hope the examples will be useful for someone as a learning material or someone will enjoy seeing the HN stats charts. Please let me know if you do any interesting experiments with the <a href='https://github.com/vrepsys/hn-analytics'>HN metadata posted on Github</a>. Leave any comments on <a href="" class="hn-link">this HN thread</a>. To get in touch send me an <a href="mailto:valdemaras@gmail.com?Subject=Hello">email</a> or <a href="https://twitter.com/vrepsys">follow me on twitter</a>. </p>
  <p> Thanks to <a href="http://adom.as/">Adomas Paltanaviƒçius</a> for proofreading this text.</p>
  <div style="height: 120px;"></div>
  
  
